// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  NORMAL_USER
  STORE_OWNER
}

model User {
  id           String   @id @default(cuid())
  name         String   @db.VarChar(60)
  email        String   @unique @db.VarChar(255)
  address      String   @db.VarChar(400)
  passwordHash String   @db.VarChar(255)
  role         UserRole @default(NORMAL_USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  ownedStores Store[]   @relation("StoreOwner")
  ratings     Rating[]

  @@map("users")
}

model Store {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  address   String   @db.VarChar(400)
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner   User     @relation("StoreOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ratings Rating[]

  @@map("stores")
}

model Rating {
  id          String   @id @default(cuid())
  ratingValue Int      @db.SmallInt
  userId      String
  storeId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Unique constraint to ensure one rating per user per store
  @@unique([userId, storeId])
  @@map("ratings")
}
